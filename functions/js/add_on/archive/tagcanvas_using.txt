http://www.goat1000.com/tagcanvas-install.php

nstallation Instructions

1. Download the javascript file of your choice from the main TagCanvas page and copy it to your website. If your site already uses jQuery then I recommend using the plugin version, otherwise the stand-alone version will produce the same results without the need to install jQuery too.

2. Include the Javascript files into your page:

<!--[if lt IE 9]><script type="text/javascript" src="excanvas.js"></script><![endif]-->
<script src="tagcanvas.min.js" type="text/javascript"></script>
or for the jQuery plugin:

 <!--[if lt IE 9]><script type="text/javascript" src="excanvas.js"></script><![endif]-->
 <script src="jquery-1.4.2.min.js" type="text/javascript"></script>
 <script src="jquery.tagcanvas.min.js" type="text/javascript"></script>
The HTML comment uses a syntax recognised by Internet Explorer called conditional comments to include the excanvas.js script for versions of IE lower than version 9.

The main jQuery file must be included before the TagCanvas plugin. The plugin should work with all jQuery versions from 1.3 up (and possibly some earlier versions).

3. Add a canvas to your page, with the required width and height:

<div id="myCanvasContainer">
 <canvas width="300" height="300" id="myCanvas">
  <p>Anything in here will be replaced on browsers that support the canvas element</p>
 </canvas>
</div>
The width and height attributes are always in pixels, the same as with an <img> element. Don't use CSS to change the size of the canvas, as this will distort its shape and mess up the mouse position calculations.

4a. If you don't care about supporting Internet Explorer versions up to 8, put your tag links inside the canvas. They will be shown as-is on browsers that do not support the canvas element:

<div id="myCanvasContainer">
 <canvas width="300" height="300" id="myCanvas">
  <p>Anything in here will be replaced on browsers that support the canvas element</p>
  <ul>
   <li><a href="http://www.google.com" target="_blank">Google</a></li>
   <li><a href="/fish">Fish</a></li>
   <li><a href="/chips">Chips</a></li>
   <li><a href="/salt">Salt</a></li>
   <li><a href="/vinegar">Vinegar</a></li>
  </ul>
 </canvas>
</div>
You don't have to use ul and li, any link inside the canvas will be found. The tag links may be outside the canvas and referenced by the id of a containing element - see below for details.

4b. If you DO want to support IE versions below 9, the tag links MUST BE OUTSIDE the canvas element or they can not be found by the TagCanvas script:

<div id="myCanvasContainer">
 <canvas width="300" height="300" id="myCanvas">
  <p>In Internet Explorer versions up to 8, things inside the canvas are inaccessible!</p>
 </canvas>
</div>
 
<div id="tags">
 <ul>
  <li><a href="http://www.google.com" target="_blank">Google</a></li>
  <li><a href="/fish">Fish</a></li>
  <li><a href="/chips">Chips</a></li>
  <li><a href="/salt">Salt</a></li>
  <li><a href="/vinegar">Vinegar</a></li>
 </ul>
</div>
— and this means you must pass the ID of the container your tags are in to TagCanvas (in this example the 'tags' div) as described below.

5. Initialise the TagCanvas class with the id of the canvas element when the page is loaded:

 <script type="text/javascript">
  window.onload = function() {
    try {
      TagCanvas.Start('myCanvas');
    } catch(e) {
      // something went wrong, hide the canvas container
      document.getElementById('myCanvasContainer').style.display = 'none';
    }
  };
 </script>
If your tag links are not inside the canvas, pass the id of the element containing the tags as an extra argument to the Start function:

      ...
      TagCanvas.Start('myCanvas','tagList');
      ...
To start TagCanvas using the jQuery plugin:

 <script type="text/javascript">
 $(document).ready(function() {
   if( ! $('#myCanvas').tagcanvas({
     textColour : '#ffffff',
     outlineThickness : 1,
     maxSpeed : 0.03,
     depth : 0.75
   })) {
     // TagCanvas failed to load
     $('#myCanvasContainer').hide();
   }
   // your other jQuery stuff here...
 });
 </script>
The tagcanvas() jQuery function also takes an optional argument for the id of the tag list container, which goes after the configuration options:

   ...
   $('#myCanvas').tagcanvas({
     depth : 0.75
   },'tagList');
   ...
The function returns true if the tag cloud is started successfully, false otherwise. This is so that you can handle the problem and replace the canvas with something else, or whatever you want to do.

Note that in the example above, the canvas container element (the  div with the ID of myCanvasContainer) is hidden when TagCanvas fails - the canvas itself may not respond to jQuery functions when running in a browser without canvas support.

6. That's it. The canvas itself is a part of the page, so you can style it with CSS - e.g. to add a border, margins, background, etc. TagCanvas does not draw a background onto the canvas, so the page background colour or image will show through.

The individual tags are drawn on the canvas using drawing functions, so they cannot be styled using CSS. Several options are supplied for specifying how they should be drawn, listed on the options page.

-------------------------------------------------------------------------------------------
Specifying options

There are two ways of specifying options for the stand-alone version of TagCanvas, and just the one way to set options for the jQuery plugin version.

Stand-alone - class variables
The first method for setting options is to set the corresponding class variables before calling the Start function:

 <script type="text/javascript">
 window.onload = function() {
  // set colour of text and outline of active tag
  TagCanvas.textColour = '#ffffff';
  TagCanvas.outlineColour = '#ff9999';
  TagCanvas.Start('myCanvas');
 };
 </script>
Using this method multiple tag clouds on the same page will share the same set of options.

Stand-alone - options array
The second way to configure the stand-alone version is to pass in the required options to the Start function as an array of  name: value pairs in the third argument:

 <script type="text/javascript">
 var options = {
  textColour: '#fff',
  textHeight: 20,
  depth: 0.99
 };
 window.onload = function() {
  // use internal link list, so second argument is ''
  TagCanvas.Start('myCanvas', '', options);
 };
 </script>
I use the word "array" in its more generic sense here - the { x: y } syntax actually creates an unnamed Javascript object.

If you are using multiple clouds on a page, you could use both of the above methods at the same time - set the options that you want for all your clouds to share using class variables, then pass in the different options for each cloud as arrays.

jQuery - options array
For the jQuery plugin version of TagCanvas, the first method of setting options used by the standalone version is not available, so you must pass all the relevant options into the tagcanvas function using the array method:

 <script type="text/javascript">
 $(document).ready(function() {
   $('#myCanvas').tagcanvas({
     textColour : '#ffffff',
     outlineColour : '#ff9999'
   });
 });
 </script>
The options array is the first argument to the jQuery plugin function, as it gets the canvas details from the jQuery selector.

Options list

The following table lists all the options that are available in the latest version of TagCanvas.

When specifying an option the option name does not need to be in quotes. The value should be quoted with single or double quotes unless it is a number, an array or the Javascript keywords true, false or null.

The default values for each option are shown in the second column of the table below.

TagCanvas options - Hide table
Option	Default	Description
activeCursor	"pointer"	The CSS cursor type to use when the mouse is over a tag.
animTiming	Smooth	The animation timing function for use with the RotateTag and TagToFront functions. The values available are "Smooth" and "Linear".
bgColour	null	Background colour of tag, null for no background. The string "tag" means use the original link background colour.
bgOutline	null	Colour of tag background outline. Use null for the same as the text colour, use "tag" for the original link text colour.
bgOutlineThickness	0	Thickness of tag background outline in pixels, 0 for no outline.
bgRadius	0	Radius for rounded corners of background in pixels.
centreFunc	null	Function for drawing in centre of cloud. The function is passed in these parameters in order: canvas 2D context; canvas width; canvas height; centre X; centre Y. See the centre callback function page for details.
centreImage	null	Image to draw at centre of cloud. Uses a built-in centreFunc callback function to draw the image at full size in the middle of the canvas.
clickToFront	null	If set to a number, the selected tag will move to the front in this many milliseconds before activating.
decel	0.95	Deceleration rate when mouse leaves canvas.
depth	0.5	Controls the perspective (0.0-1.0)
dragControl	false	When enabled, cloud moves when dragged instead of based on mouse position.
dragThreshold	4	The number of pixels that the cursor must move to count as a drag instead of a click.
fadeIn	0	Time to fade in tags at start, in milliseconds.
freezeActive	false	Set to true to pause movement when a tag is highlighted.
freezeDecel	false	Set to true to decelerate when highlighted tags freeze instead of stopping suddenly.
frontSelect	false	Set to true to prevent selection of tags at back of cloud.
hideTags	true	Set to true to automatically hide the tag list element if TagCanvas is started successfully.
imageAlign	"centre"	Horizontal image alignment, one of “centre”, “left” or “right”.
imageMode	null	What to display when tag contains images and text.
null
Image if present, otherwise text.
image
Image tags only.
text
Text tags only.
both
Image and text on tag using imagePosition.
imagePadding	2	Distance between image and text when using an imageMode of “both”.
imagePosition	"left"	Position of image relative to text when using an imageMode of “both”. Options are “left”, “right”, “top“ or “bottom”.
imageRadius	0	Radius for image corners, in pixels. Also supports using a percentage which must be enclosed in a string, e.g. "20%".
imageScale	1	Amount to scale images by - the default of 1 uses the size they appear on the page. For no scaling (use the actual image size) set this to null.
imageVAlign	"middle"	Vertical image alignment, one of “middle”, “top” or “bottom”.
initial	null	Starting rotation speed, with horizontal and vertical values as an array, e.g. [0.8,-0.3]. Values are multiplied by maxSpeed.
interval[1]	20	Interval between animation frames, in milliseconds.
lock	null	Limits rotation of the cloud using the mouse. A value of "x" limits rotation to the x-axis, "y" limits rotation to the y-axis. A value of "xy" will prevent the cloud rotating in response to the mouse - the cloud will only move if the initial option is used to give it a starting speed.
maxBrightness	1.0	Brightness (opacity) of tags at front of cloud (0.0-1.0).
maxSpeed	0.05	Maximum speed of rotation.
minBrightness	0.1	Brightness (opacity) of tags at back of cloud (0.0-1.0).
minSpeed	0.0	Minimum speed of rotation when mouse leaves canvas.
minTags	0	The minimum number of tags to show in the cloud. If the number of links available is lower than this value, the list will be repeated. The maximum supported value is 200. The repeatTags option takes precedence over minTags.
noMouse	false	Set to true to prevent any mouse interaction. The initial option must be used to animate the cloud, otherwise it will be motionless.
noSelect	false	Set to true to prevent the selection of tags.
noTagsMessage	true	Displays “No tags” instead of an empty canvas when there are no tags available.
offsetX	0	Offsets the centre of the cloud horizontally (measured in pixels)
offsetY	0	Offsets the centre of the cloud vertically (measured in pixels)
outlineColour	"#ffff99"	Colour of the active tag highlight
outlineIncrease	4	Number of pixels to increase size of tag by for the “size” outline method. Negative values are supported for decreasing the size.
outlineMethod	"outline"	Type of highlight to use. Options are:
outline
An outline at the same depth as the active tag.
classic
Old-style outline on top of all tags.
block
Solid block of colour around the active tag.
colour
Changes the colour of the text or image of the current tag to the outlineColour value.
size
Increases the size of the tag, using the outlineIncrease option for the amount.
none
No highlighting at all.
outlineOffset	5	Distance of outline from text, in pixels. This also increases the size of the active area around the tag.
outlineRadius	0	Radius for rounded corners on outline box in pixels
outlineThickness	2	Thickness of outline in pixels
padding	0	Amount of space around text and inside background.
pinchZoom	false	Set to true to enable zooming in and out of the cloud by pinching on touchscreen devices.
pulsateTime	3	Pulse rate, in seconds per beat
pulsateTo	1.0	Pulsate outline to this opacity (0.0-1.0)
radiusX	1	Initial size of cloud from centre to sides.
radiusY	1	Initial size of cloud from centre to top and bottom.
radiusZ	1	Initial size of cloud from centre to front and back.
repeatTags	0	The number of times to repeat the list of tags in the cloud. The maximum supported value is 64. This option overrides the minTags option.
reverse	false	Set to true to reverse direction of movement relative to mouse position.
scrollPause	0	Animation delay in milliseconds for when the page is being scrolled. Applies to all TagCanvas instances on the page.
shadow	"#000000"	Colour of the shadow behind each tag.
shadowBlur	0	Amount of tag shadow blurring, in pixels.
shadowOffset	[0,0]	X and Y offset of the tag shadow, in pixels.
shape	"sphere"	The shape of the cloud. Currently supported are sphere, hcylinder for a cylinder that starts off horizontal, vcylinder for a cylinder that starts off vertical, hring for a horizontal circle and vring for a vertical circle. You may also provide the name of a function to use for generating the shape. See the TagCanvas shapes page for details and examples.
shuffleTags	false	Set to true to randomize the order of the tags.
splitWidth	0	If greater than 0, breaks the tag into multiple lines at word boundaries when the line would be longer than this value. Lines are automatically broken at <br> tags.
stretchX	1	Stretch or compress the cloud horizontally.
stretchY	1	Stretch or compress the cloud vertically.
textAlign	"centre"	Horizontal text alignment, one of “centre”, “left” or “right”.
textColour[2]	"#ff99ff"	Colour of the tag text - empty string or null to use the colour of the original link.
textFont[2]	"Helvetica, Arial,
 sans-serif"	Font family for the tag text - empty string or null to use the font of the original link.
textHeight	15	Height of the tag text font (in pixels).
textVAlign	"middle"	Vertical text alignment, one of “middle”, “top” or “bottom”.
tooltip[3]	null	Sets tooltip display method: null for no tooltips; native for operating system tooltips; div for div-based.
tooltipClass[3]	"tctooltip"	Class of tooltip div.
tooltipDelay[3]	300	Time to pause while mouse is not moving before displaying tooltip div, in milliseconds.
txtOpt	true	Text optimisation, converts text tags to images for better performance.
txtScale	2	Scaling factor of text when converting to image in txtOpt mode.
weight[4]	false	Set to true to turn on weighting of tags.
weightFrom[4]	null	The link attribute to take the tag weight from. The default of null means that the weight is taken from the calculated link font size.
weightGradient[4]	{0:'#f00', 0.33:'#ff0',
 0.66:'#0f0', 1:'#00f'}	The colour gradient used for colouring tags when using a weight mode of colour or both.
weightMode[4]	"size"	Method to use for displaying tag weights. Should be one of:
size
Display more significant tags in a larger font size.
colour
Display tags using colour values from the weightGradient option.
both
Use both size and colour to visualise weights.
bgcolour
Use a weightGradient to set the tag background colour.
bgoutline
Use a weightGradient to set the tag background outline colour. Tag background outlines must be enabled using the bgOutlineThickness option.
weightSize[4]	1.0	Multiplier for adjusting the size of tags when using a weight mode of size or both.
weightSizeMax[4]	null	Maximum font size when weighted sizing is enabled.
weightSizeMin[4]	null	Minimum font size when weighted sizing is enabled.
wheelZoom	true	Enables zooming the cloud in and out using the mouse wheel or scroll gesture.
zoom	1.0	Adjusts the relative size of the tag cloud in the canvas. Larger values will zoom into the cloud, smaller values will zoom out.
zoomMax	3.0	Maximum zoom value.
zoomMin	0.3	Minimum zoom value.
zoomStep	0.05	The amount that the zoom is changed by with each movement of the mouse wheel.
TagCanvas options